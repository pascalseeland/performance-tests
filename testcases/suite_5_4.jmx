<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ILIAS Performance Testsuite" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Global Testsuite Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">${__P(PROTOCOL,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">${__P(HOST,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">${__P(PATH,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">${__P(PORT,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLIENT_ID" elementType="Argument">
            <stringProp name="Argument.name">CLIENT_ID</stringProp>
            <stringProp name="Argument.value">${__P(CLIENT_ID,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADS" elementType="Argument">
            <stringProp name="Argument.name">THREADS</stringProp>
            <stringProp name="Argument.value">${__P(THREADS,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMP_UP" elementType="Argument">
            <stringProp name="Argument.name">RAMP_UP</stringProp>
            <stringProp name="Argument.value">${__P(RAMP_UP,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOPS" elementType="Argument">
            <stringProp name="Argument.name">LOOPS</stringProp>
            <stringProp name="Argument.value">${__P(LOOPS,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WORK_DIR" elementType="Argument">
            <stringProp name="Argument.name">WORK_DIR</stringProp>
            <stringProp name="Argument.value">${__P(WORK_DIR,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OUT_DIR" elementType="Argument">
            <stringProp name="Argument.name">OUT_DIR</stringProp>
            <stringProp name="Argument.value">${__P(OUT_DIR,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CREDENTIALS_CSV" elementType="Argument">
            <stringProp name="Argument.name">CREDENTIALS_CSV</stringProp>
            <stringProp name="Argument.value">${__P(CREDENTIALS_CSV,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IS_ADMIN" elementType="Argument">
            <stringProp name="Argument.name">IS_ADMIN</stringProp>
            <stringProp name="Argument.value">${__P(IS_ADMIN,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="READ_ONLY" elementType="Argument">
            <stringProp name="Argument.name">READ_ONLY</stringProp>
            <stringProp name="Argument.value">${__P(READ_ONLY,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERNAME" elementType="Argument">
            <stringProp name="Argument.name">USERNAME</stringProp>
            <stringProp name="Argument.value">${__P(USERNAME,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(PASSWORD,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">import from properties - always default to &apos;#NV&apos; if not supplied</stringProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
        <stringProp name="HTTPSampler.port">${PORT}</stringProp>
        <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">${PATH}</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies">
          <elementProp name="XDEBUG_SESSION" elementType="Cookie" testname="XDEBUG_SESSION">
            <stringProp name="Cookie.value">XDEBUG_ECLIPSE</stringProp>
            <stringProp name="Cookie.domain">localhost-php7</stringProp>
            <stringProp name="Cookie.path">/</stringProp>
            <boolProp name="Cookie.secure">false</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
        </collectionProp>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Startup" enabled="true">
        <stringProp name="TestPlan.comments">stop after any error</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1451388741000</longProp>
        <longProp name="ThreadGroup.end_time">1451388741000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Assert Imported Variables" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="PROTOCOL" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="488764481">(?!#NV)https|http</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">http, https</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">PROTOCOL</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="HOST" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-856324860">(?!#NV).*</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">domain or ip, e.g. www.ilias.de, localhost, 127.0.0.1</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">HOST</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="PATH" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-856324860">(?!#NV).*</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">may be empty - e.g. /path/to/ilias, /docu, /test51, ..</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">PATH</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="PORT" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-776220837">(?!#NV)\d+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">digit</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">PORT</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CLIENT_ID" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-856324859">(?!#NV).+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">may not be empty or null [equals not &quot;&quot; fails for null, i.e. yields true]</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">CLIENT_ID</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="THREADS" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-776220837">(?!#NV)\d+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">digit</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">THREADS</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="RAMP_UP" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-776220837">(?!#NV)\d+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">digit</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">RAMP_UP</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="LOOPS" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-776220837">(?!#NV)\d+</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">LOOPS</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="WORK_DIR" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-856324859">(?!#NV).+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">may not be empty or null [equals not &quot;&quot; fails for null, i.e. yields true]</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">WORK_DIR</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="IS_ADMIN" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="412828714">true|TRUE|false|FALSE</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">IS_ADMIN</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If no CREDENTIALS_CSV" enabled="true">
          <stringProp name="IfController.condition">&quot;${CREDENTIALS_CSV}&quot;==&quot;#NV&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Assert Credentials" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="USERNAME" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-856324859">(?!#NV).+</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">may not be empty or null [must use regex, because &quot;Not&quot; is buggy for null values, i.e. &quot;must not equal ``&quot; yields true for null]</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">USERNAME</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="PASSWORD" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-856324859">(?!#NV).+</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">may not be empty or null [must use regex, because &quot;Not&quot; is buggy for null values, i.e. &quot;must not equal ``&quot; yields true for null]</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">PASSWORD</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Run Testplan" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMP_UP}</stringProp>
        <longProp name="ThreadGroup.start_time">1450856806000</longProp>
        <longProp name="ThreadGroup.end_time">1450856806000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Single Thread" enabled="true">
          <stringProp name="IfController.condition">${THREADS} == 1</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(&quot;${USERNAME}&quot; != &quot;###STOP###&quot;)}</stringProp>
          </WhileController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">config/users_single_thread.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="variableNames">USERNAME,PASSWORD,IS_ADMIN</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
            </CSVDataSet>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${USERNAME}&quot; != &quot;###STOP###&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <stringProp name="TestPlan.comments">If we don&apos;t have a thread id, we are in the forum overview</stringProp>
            </IfController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Login Module" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-537986674">ILIAS Performance Testsuite</stringProp>
                  <stringProp name="-1021984528">Run Testplan</stringProp>
                  <stringProp name="1817339049">Modules must be hidden</stringProp>
                  <stringProp name="-1161959613">Login Module</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Testplan Module Singlethreaded" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-537986674">ILIAS Performance Testsuite</stringProp>
                  <stringProp name="-1021984528">Run Testplan</stringProp>
                  <stringProp name="1817339049">Modules must be hidden</stringProp>
                  <stringProp name="1678476145">Testplan Module</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Logout Module" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-537986674">ILIAS Performance Testsuite</stringProp>
                  <stringProp name="-1021984528">Run Testplan</stringProp>
                  <stringProp name="1817339049">Modules must be hidden</stringProp>
                  <stringProp name="-191912510">Logout Module</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="InsideLoopingCounter" enabled="true">
              <stringProp name="CounterConfig.start">0</stringProp>
              <stringProp name="CounterConfig.end">5</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">InsideLoopingCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Multi Thread" enabled="true">
          <stringProp name="IfController.condition">${THREADS} &gt; 1</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TEST Login" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Load Login Credentials CSV" enabled="true"/>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CREDENTIALS_CSV" enabled="true">
                <stringProp name="IfController.condition">&quot;${CREDENTIALS_CSV}&quot;!=&quot;#NV&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ILIAS Login Credentials CSV" enabled="true">
                  <stringProp name="filename">${CREDENTIALS_CSV}</stringProp>
                  <stringProp name="fileEncoding">utf8</stringProp>
                  <stringProp name="variableNames">USERNAME,PASSWORD</stringProp>
                  <stringProp name="delimiter">,</stringProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <boolProp name="stopThread">true</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                  <boolProp name="ignoreFirstLine">false</boolProp>
                </CSVDataSet>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Login Module" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-537986674">ILIAS Performance Testsuite</stringProp>
                <stringProp name="-1021984528">Run Testplan</stringProp>
                <stringProp name="1817339049">Modules must be hidden</stringProp>
                <stringProp name="-1161959613">Login Module</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Testplan Module" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-537986674">ILIAS Performance Testsuite</stringProp>
                <stringProp name="-1021984528">Run Testplan</stringProp>
                <stringProp name="1817339049">Modules must be hidden</stringProp>
                <stringProp name="1678476145">Testplan Module</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Logout Module" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-537986674">ILIAS Performance Testsuite</stringProp>
                <stringProp name="-1021984528">Run Testplan</stringProp>
                <stringProp name="1817339049">Modules must be hidden</stringProp>
                <stringProp name="-191912510">Logout Module</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Modules must be hidden" enabled="false">
          <stringProp name="TestPlan.comments">This Simple Controller must stay hidden, because the inside Modules would else be executed twice</stringProp>
        </GenericController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Login Module" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Login" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/login.php?client_id=${CLIENT_ID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetLoginAction" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetLoginAction</stringProp>
                <stringProp name="HtmlExtractor.expr">#form_[name=formlogin]</stringProp>
                <stringProp name="HtmlExtractor.attribute">action</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetLoginUsername" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetLoginUsername</stringProp>
                <stringProp name="HtmlExtractor.expr">#form_[name=formlogin] #username</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetLoginPassword" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetLoginPassword</stringProp>
                <stringProp name="HtmlExtractor.expr">#form_[name=formlogin] #password</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetlLoginSubmit" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetLoginSubmit</stringProp>
                <stringProp name="HtmlExtractor.expr">#form_[name=formlogin] input[type=submit]</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetLoginSubmitV" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetLoginSubmitV</stringProp>
                <stringProp name="HtmlExtractor.expr">#form_[name=formlogin] input[type=submit]</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLoginAction" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="36139">#NV</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetLoginAction</stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLoginUsername" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="36139">#NV</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetLoginUsername</stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLoginPassword" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="36139">#NV</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetLoginPassword</stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLoginSubmit" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="36139">#NV</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetLoginSubmit</stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLoginSubmitV" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="36139">#NV</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetLoginSubmitV</stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Login" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="${ilGetLoginUsername}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${USERNAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">${ilGetLoginUsername}</stringProp>
                  </elementProp>
                  <elementProp name="${ilGetLoginPassword}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${PASSWORD}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">${ilGetLoginPassword}</stringProp>
                  </elementProp>
                  <elementProp name="${ilGetLoginSubmit}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ilGetLoginSubmitV}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">${ilGetLoginSubmit}</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/${ilGetLoginAction}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="ON ERROR: Start Next Iteration" enabled="true">
                <intProp name="OnError.action">4</intProp>
              </ResultAction>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilPostLoginAction" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilPostLoginAction</stringProp>
                <stringProp name="HtmlExtractor.expr">#form_[name=formlogin]</stringProp>
                <stringProp name="HtmlExtractor.attribute">action</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilPostLoginAction" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="36139">#NV</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilPostLoginAction</stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Testplan Module" enabled="true"/>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Reset Loop Variables if loop changes" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">String currentLoop     = &quot;${__BeanShell(vars.getIteration();,)}&quot;;
String currentThread   = &quot;${__BeanShell(ctx.getThreadNum();,)}&quot;;
String oldLoop         = vars.get(&quot;my_custom_iteration_counter&quot;);
String myThread        = vars.get(&quot;my_custom_thread_counter&quot;);
String currentUserLoop = vars.get(&quot;InsideLoopingCounter&quot;);
String userLoop        = vars.get(&quot;my_custom_looping_counter&quot;);

if((currentLoop != oldLoop &amp;&amp; currentThread == myThread) ||
   (userLoop != currentUserLoop &amp;&amp; currentThread == myThread)) {
   vars.put(&quot;courses_ref_id&quot;,&quot;&quot;);
   vars.put(&quot;forum_ref_id&quot;,&quot;&quot;);
   vars.put(&quot;calendar_date&quot;,&quot;&quot;);
   vars.remove(&quot;ilGetCategoryHeaderImage&quot;);
   vars.remove(&quot;ilGetFirstCreatedCategoryRefId&quot;);
   vars.remove(&quot;ilGetLastcreatedCategoryRefId&quot;);
   vars.remove(&quot;ilGetLastcreatedCategoryRefId_g&quot;);
   vars.remove(&quot;ilGetLastcreatedCategoryRefId_g0&quot;);
   vars.remove(&quot;ilGetLastcreatedCategoryRefId_g1&quot;);
   vars.remove(&quot;ilGetRemoveCategoryActionUrl&quot;);
   vars.remove(&quot;ilGetRemoveCategoryActionUrl_g&quot;);
   vars.remove(&quot;ilGetRemoveCategoryActionUrl_g0&quot;);
   vars.remove(&quot;ilGetRemoveCategoryActionUrl_g1&quot;);
   vars.remove(&quot;ilGetRemoveCategoryFormActionUrl&quot;);
   vars.remove(&quot;ilGetNewCategoryAction&quot;);
   vars.remove(&quot;ilGetRepositoryNewCat&quot;);
   vars.remove(&quot;ilPostNewCategoryNewCat&quot;);
   vars.remove(&quot;ilCourseCreationSessions&quot;);
   vars.remove(&quot;ilCourseCreationCounter&quot;);
   vars.remove(&quot;ilCourseCreationCounterForTestTitle&quot;);
   vars.putObject(&quot;ilGetFirstCreatedCategoryRefId&quot;, null);
   vars.putObject(&quot;CategoryRefIds&quot;, null);
}

vars.put(&quot;my_custom_iteration_counter&quot;, currentLoop);
vars.put(&quot;my_custom_thread_counter&quot;, currentThread);
vars.put(&quot;my_custom_looping_counter&quot;, currentUserLoop);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PersonalDesktop" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PersonalSettings" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Ensure personal language is english getFormURL" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="baseClass" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">baseClass</stringProp>
                      </elementProp>
                      <elementProp name="cmd" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">jumpToSettings</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">cmd</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetPersonalProfileFormUrl" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetPersonalProfileFormUrl</stringProp>
                    <stringProp name="HtmlExtractor.expr">#form_</stringProp>
                    <stringProp name="HtmlExtractor.attribute">action</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetPersonalProfileFormUrl" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetPersonalProfileFormUrl</stringProp>
                    <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Ensure personal language is english" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="cmd[saveGeneralSettings]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">cmd[saveGeneralSettings]</stringProp>
                      </elementProp>
                      <elementProp name="language" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">en</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">language</stringProp>
                      </elementProp>
                      <elementProp name="skin_style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">default:delos</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">skin_style</stringProp>
                      </elementProp>
                      <elementProp name="screen_reader_optimization" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">screen_reader_optimization</stringProp>
                      </elementProp>
                      <elementProp name="hits_per_page" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">9999</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">hits_per_page</stringProp>
                      </elementProp>
                      <elementProp name="store_last_visited" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">store_last_visited</stringProp>
                      </elementProp>
                      <elementProp name="bs_allow_to_contact_me" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">bs_allow_to_contact_me</stringProp>
                      </elementProp>
                      <elementProp name="timezone" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Europe/Berlin</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">timezone</stringProp>
                      </elementProp>
                      <elementProp name="date_format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">date_format</stringProp>
                      </elementProp>
                      <elementProp name="time_format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">time_format</stringProp>
                      </elementProp>
                      <elementProp name="char_selector_availability" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">char_selector_availability</stringProp>
                      </elementProp>
                      <elementProp name="char_selector_blocks[0]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">all</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">char_selector_blocks[0]</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/${ilGetPersonalProfileFormUrl}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetSuccessAfterSaving" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetSuccessAfterSaving</stringProp>
                    <stringProp name="HtmlExtractor.expr">.ilAdminRow .alert</stringProp>
                    <stringProp name="HtmlExtractor.attribute">class</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetSuccessAfterSaving" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1007402190">alert alert-success</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetSuccessAfterSaving</stringProp>
                    <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Empty Password Form can not be saved" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="cmd[savePassword]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">cmd[savePassword]</stringProp>
                      </elementProp>
                      <elementProp name="current_password" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">current_password</stringProp>
                      </elementProp>
                      <elementProp name="new_password" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">new_password</stringProp>
                      </elementProp>
                      <elementProp name="new_password_retype" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">new_password_retype</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/${ilGetPersonalProfileFormUrl}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetErrorAfterSaving" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetErrorAfterSaving</stringProp>
                    <stringProp name="HtmlExtractor.expr">.ilAdminRow .alert</stringProp>
                    <stringProp name="HtmlExtractor.attribute">class</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetErrorAfterSaving" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-553626632">alert alert-danger</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetErrorAfterSaving</stringProp>
                    <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Selected Items" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="baseClass" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">baseClass</stringProp>
                    </elementProp>
                    <elementProp name="cmd" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">jumpToSelectedItems</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">cmd</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetSelectedItemsBlHead" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetSelectedItemsBlHead</stringProp>
                  <stringProp name="HtmlExtractor.expr">a#block_pditems_0_blhead.ilAccAnchor</stringProp>
                  <stringProp name="HtmlExtractor.attribute">name</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetSelectedItemsBlHead" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1518881310">block_pditems_0_blhead</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetSelectedItemsBlHead</stringProp>
                  <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Mail" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/ilias.php?baseClass=ilMailGUI</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetMailHeaderImage" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetMailHeaderImage</stringProp>
                  <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                  <stringProp name="HtmlExtractor.attribute">src</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetMailHeaderImage" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-11153909">/images/icon_mail.svg</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetMailHeaderImage</stringProp>
                  <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Memberships" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="baseClass" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">baseClass</stringProp>
                    </elementProp>
                    <elementProp name="cmd" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">jumpToMemberships</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">cmd</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetMembershipsHead" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetMembershipsHead</stringProp>
                  <stringProp name="HtmlExtractor.expr">a#block_pditems_0_blhead.ilAccAnchor</stringProp>
                  <stringProp name="HtmlExtractor.attribute">id</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetMembershipsNewsHead" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetMembershipsNewsHead</stringProp>
                  <stringProp name="HtmlExtractor.expr">#il_left_col #block_pdnews_0 .ilAccAnchor</stringProp>
                  <stringProp name="HtmlExtractor.attribute">id</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetMembershipsHead" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1518881310">block_pditems_0_blhead</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetMembershipsHead</stringProp>
                  <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetMembershipsNewsHead" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-100872481">block_pdnews_0_blhead</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetMembershipsNewsHead</stringProp>
                  <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET News" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="baseClass" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">baseClass</stringProp>
                    </elementProp>
                    <elementProp name="cmd" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">jumpToNews</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">cmd</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetMembershipsHead" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetMembershipsHead</stringProp>
                  <stringProp name="HtmlExtractor.expr">#ilAll #mainspacekeeper #mainscrolldiv .ilAccAnchor</stringProp>
                  <stringProp name="HtmlExtractor.attribute">id</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetMembershipsNewsForm" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetMembershipsNewsForm</stringProp>
                  <stringProp name="HtmlExtractor.expr">#news_per</stringProp>
                  <stringProp name="HtmlExtractor.attribute">name</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetMembershipsHead" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1380028607">il_mhead_t_focus</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetMembershipsHead</stringProp>
                  <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetMembershipsNewsForm" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1395182001">news_per</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetMembershipsNewsForm</stringProp>
                  <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Calendar" enabled="true"/>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(&quot;${calendar_date}&quot; != &quot;###STOP###&quot;,)}</stringProp>
                </WhileController>
                <hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                    <stringProp name="filename">config/calendar_and_sessions.csv</stringProp>
                    <stringProp name="fileEncoding">UTF-8</stringProp>
                    <stringProp name="variableNames">calendar_date,calendar_ref_id,calendar_name</stringProp>
                    <boolProp name="ignoreFirstLine">true</boolProp>
                    <stringProp name="delimiter">,</stringProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="shareMode">shareMode.group</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">&quot;${calendar_date}&quot; != &quot;###STOP###&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONSTRAINT Calendar CommandNode for ${calendar_date}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="baseClass" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">baseClass</stringProp>
                          </elementProp>
                          <elementProp name="cmd" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">jumpToCalendar</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmd</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">ilGetCalendarWeekCommandNode</stringProp>
                        <stringProp name="RegexExtractor.regex">cmdClass=ilcalendarweekgui.+?cmdNode=(.+?)&amp;.*?&quot;&gt;</stringProp>
                        <stringProp name="RegexExtractor.template"></stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number"></stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">ilGetCalendarMonthCommandNode</stringProp>
                        <stringProp name="RegexExtractor.regex">cmdClass=ilcalendarmonthgui.+?cmdNode=(.+?)&amp;.*?&quot;&gt;</stringProp>
                        <stringProp name="RegexExtractor.template"></stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number"></stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">ilGetCalendarDayCommandNode</stringProp>
                        <stringProp name="RegexExtractor.regex">cmdClass=ilcalendardaygui.+?cmdNode=(.+?)&amp;.*?&quot;&gt;</stringProp>
                        <stringProp name="RegexExtractor.template"></stringProp>
                        <stringProp name="RegexExtractor.default"></stringProp>
                        <stringProp name="RegexExtractor.match_number"></stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ExtractCalendarDayCommandNode" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="36139">#NV</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">12</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">ilGetCalendarDayCommandNode</stringProp>
                        <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ExtractCalendarWeekCommandNode" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="36139">#NV</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">12</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">ExtractCalendarWeekCommandNode</stringProp>
                        <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ExtractCalendarMonthCommandNode" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="36139">#NV</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">12</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">ExtractCalendarMonthCommandNode</stringProp>
                        <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Calendar Day ${calendar_date}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="cmdClass" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">ilcalendardaygui</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmdClass</stringProp>
                          </elementProp>
                          <elementProp name="baseClass" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">baseClass</stringProp>
                          </elementProp>
                          <elementProp name="seed" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${calendar_date}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">seed</stringProp>
                          </elementProp>
                          <elementProp name="cmdNode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${ilGetCalendarDayCommandNode_g1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmdNode</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCalendarDayClass" enabled="true">
                        <stringProp name="HtmlExtractor.refname">ilGetCalendarDayClass</stringProp>
                        <stringProp name="HtmlExtractor.expr">table.calstd.il-cal-day</stringProp>
                        <stringProp name="HtmlExtractor.attribute">class</stringProp>
                        <stringProp name="HtmlExtractor.default">#NV</stringProp>
                        <stringProp name="HtmlExtractor.match_number"></stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCalendarDayClass" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-592694306">calstd il-cal-day</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">ilGetCalendarDayClass</stringProp>
                        <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Download Calendar Day ${calendar_date}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="cmd" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">downloadFiles</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmd</stringProp>
                          </elementProp>
                          <elementProp name="cmdClass" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">ilcalendardaygui</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmdClass</stringProp>
                          </elementProp>
                          <elementProp name="baseClass" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">baseClass</stringProp>
                          </elementProp>
                          <elementProp name="seed" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${calendar_date}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">seed</stringProp>
                          </elementProp>
                          <elementProp name="cmdNode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${ilGetCalendarDayCommandNode_g1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmdNode</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCalendarDayClass" enabled="true">
                        <stringProp name="HtmlExtractor.refname">ilGetCalendarDayClass</stringProp>
                        <stringProp name="HtmlExtractor.expr">table.calstd.il-cal-day</stringProp>
                        <stringProp name="HtmlExtractor.attribute">class</stringProp>
                        <stringProp name="HtmlExtractor.default">#NV</stringProp>
                        <stringProp name="HtmlExtractor.match_number"></stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCalendarDayClass" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-592694306">calstd il-cal-day</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">ilGetCalendarDayClass</stringProp>
                        <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Calendar Week ${calendar_date}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="cmdClass" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">ilcalendarweekgui</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmdClass</stringProp>
                          </elementProp>
                          <elementProp name="baseClass" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">baseClass</stringProp>
                          </elementProp>
                          <elementProp name="seed" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${calendar_date}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">seed</stringProp>
                          </elementProp>
                          <elementProp name="cmdNode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${ilGetCalendarWeekCommandNode_g1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmdNode</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCalendarWeekClass" enabled="true">
                        <stringProp name="HtmlExtractor.refname">ilGetCalendarWeekClass</stringProp>
                        <stringProp name="HtmlExtractor.expr">table.calstd.il-cal-week</stringProp>
                        <stringProp name="HtmlExtractor.attribute">class</stringProp>
                        <stringProp name="HtmlExtractor.default">#NV</stringProp>
                        <stringProp name="HtmlExtractor.match_number"></stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCalendarWeekClass" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-1193084942">calstd il-cal-week</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">ilGetCalendarWeekClass</stringProp>
                        <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Download Calendar Week ${calendar_date}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="cmd" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">downloadFiles</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmd</stringProp>
                          </elementProp>
                          <elementProp name="cmdClass" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">ilcalendarweekgui</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmdClass</stringProp>
                          </elementProp>
                          <elementProp name="baseClass" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">baseClass</stringProp>
                          </elementProp>
                          <elementProp name="seed" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${calendar_date}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">seed</stringProp>
                          </elementProp>
                          <elementProp name="cmdNode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${ilGetCalendarWeekCommandNode_g1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmdNode</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCalendarWeekClass" enabled="true">
                        <stringProp name="HtmlExtractor.refname">ilGetCalendarWeekClass</stringProp>
                        <stringProp name="HtmlExtractor.expr">table.calstd.il-cal-week</stringProp>
                        <stringProp name="HtmlExtractor.attribute">class</stringProp>
                        <stringProp name="HtmlExtractor.default">#NV</stringProp>
                        <stringProp name="HtmlExtractor.match_number"></stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCalendarWeekClass" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-1193084942">calstd il-cal-week</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">ilGetCalendarWeekClass</stringProp>
                        <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Calendar Month ${calendar_date}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="cmdClass" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">ilcalendarmonthgui</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmdClass</stringProp>
                          </elementProp>
                          <elementProp name="baseClass" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">baseClass</stringProp>
                          </elementProp>
                          <elementProp name="seed" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${calendar_date}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">seed</stringProp>
                          </elementProp>
                          <elementProp name="cmdNode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${ilGetCalendarMonthCommandNode_g1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmdNode</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCalendarMonthClass" enabled="true">
                        <stringProp name="HtmlExtractor.refname">ilGetCalendarMonthClass</stringProp>
                        <stringProp name="HtmlExtractor.expr">table.calstd.il-cal-month</stringProp>
                        <stringProp name="HtmlExtractor.attribute">class</stringProp>
                        <stringProp name="HtmlExtractor.default">#NV</stringProp>
                        <stringProp name="HtmlExtractor.match_number"></stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCalendarMonthClass" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1660144194">calstd il-cal-month</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">ilGetCalendarMonthClass</stringProp>
                        <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Download Calendar Month ${calendar_date}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="cmdClass" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">ilcalendarmonthgui</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmdClass</stringProp>
                          </elementProp>
                          <elementProp name="cmd" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">downloadFiles</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmd</stringProp>
                          </elementProp>
                          <elementProp name="baseClass" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">baseClass</stringProp>
                          </elementProp>
                          <elementProp name="seed" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${calendar_date}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">seed</stringProp>
                          </elementProp>
                          <elementProp name="cmdNode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${ilGetCalendarMonthCommandNode_g1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmdNode</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCalendarMonthClass" enabled="true">
                        <stringProp name="HtmlExtractor.refname">ilGetCalendarMonthClass</stringProp>
                        <stringProp name="HtmlExtractor.expr">table.calstd.il-cal-month</stringProp>
                        <stringProp name="HtmlExtractor.attribute">class</stringProp>
                        <stringProp name="HtmlExtractor.default">#NV</stringProp>
                        <stringProp name="HtmlExtractor.match_number"></stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCalendarMonthClass" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1660144194">calstd il-cal-month</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">ilGetCalendarMonthClass</stringProp>
                        <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Session view ${calendar_date}" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="target" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">sess_${calendar_ref_id}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">target</stringProp>
                          </elementProp>
                          <elementProp name="client_id" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">client_id</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetViewSessionHeaderImage" enabled="true">
                        <stringProp name="HtmlExtractor.refname">ilGetViewSessionHeaderImage</stringProp>
                        <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                        <stringProp name="HtmlExtractor.attribute">src</stringProp>
                        <stringProp name="HtmlExtractor.default">#NV</stringProp>
                        <stringProp name="HtmlExtractor.match_number"></stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetSessionViewHeaderContent" enabled="true">
                        <stringProp name="HtmlExtractor.refname">ilGetSessionViewHeaderContent</stringProp>
                        <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
                        <stringProp name="HtmlExtractor.attribute"></stringProp>
                        <stringProp name="HtmlExtractor.default">#NV</stringProp>
                        <stringProp name="HtmlExtractor.match_number"></stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetViewSessionHeaderImage" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="2071143292">./templates/default/images/icon_sess.svg</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">ilGetViewSessionHeaderImage</stringProp>
                        <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetSessionViewHeaderContent" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-1130020738">${__urldecode(${calendar_name})}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">ilGetSessionViewHeaderContent</stringProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Repository" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Repository" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/goto.php?target=root_1</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryHeaderImage" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetRepositoryHeaderImage</stringProp>
                  <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                  <stringProp name="HtmlExtractor.attribute">src</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryBreadcrumbUrl" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetRepositoryBreadcrumbUrl</stringProp>
                  <stringProp name="HtmlExtractor.expr">ol.breadcrumb a</stringProp>
                  <stringProp name="HtmlExtractor.attribute">href</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryBreadcrumbContent" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetRepositoryBreadcrumbContent</stringProp>
                  <stringProp name="HtmlExtractor.expr">ol.breadcrumb a</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryHeaderContent" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetRepositoryHeaderContent</stringProp>
                  <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryHeaderImage" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-167724106">/images/icon_root.svg</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetRepositoryHeaderImage</stringProp>
                  <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryBreadcrumbContent" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2240617">${ilGetRepositoryHeaderContent}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetRepositoryBreadcrumbContent</stringProp>
                  <stringProp name="TestPlan.comments">sanity check, that we picked the right breadcrumb (must match the header)</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryBreadcrumbUrl" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1449016747">ilias\.php\?ref\_id\=1\&amp;cmd\=frameset\&amp;cmdClass\=ilrepositorygui\&amp;cmdNode\=[^&amp;]*\&amp;baseClass\=ilRepositoryGUI1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetRepositoryBreadcrumbUrl</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryHeaderContent" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-856324859">(?!#NV).+</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetRepositoryHeaderContent</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Courses" enabled="true"/>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(&quot;${courses_ref_id}&quot; != &quot;###STOP###&quot;)}</stringProp>
              </WhileController>
              <hashTree>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                  <stringProp name="filename">config/course_objects.csv</stringProp>
                  <stringProp name="fileEncoding">UTF-8</stringProp>
                  <stringProp name="variableNames">courses_ref_id, courses_name</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <stringProp name="delimiter">,</stringProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="shareMode">shareMode.group</stringProp>
                </CSVDataSet>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${courses_ref_id}&quot; != &quot;###STOP###&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <stringProp name="TestPlan.comments">If we don&apos;t have a thread id, we are in the forum overview</stringProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Course Sessions ${courses_name}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="target" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">crs_${courses_ref_id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">target</stringProp>
                        </elementProp>
                        <elementProp name="client_id" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">client_id</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCourseHeaderImage" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetCourseHeaderImage</stringProp>
                      <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                      <stringProp name="HtmlExtractor.attribute">src</stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCourseHeaderContent" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetCourseHeaderContent</stringProp>
                      <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
                      <stringProp name="HtmlExtractor.attribute"></stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourseHeaderImage" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-462514170">./templates/default/images/icon_crs.svg</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetCourseHeaderImage</stringProp>
                      <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourseHeaderContent" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-265122970">${__urldecode(${courses_name})}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetCourseHeaderContent</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Forum" enabled="true"/>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(&quot;${forum_ref_id}&quot; != &quot;###STOP###&quot;)}</stringProp>
              </WhileController>
              <hashTree>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                  <stringProp name="filename">config/forum_objects.csv</stringProp>
                  <stringProp name="fileEncoding">UTF-8</stringProp>
                  <stringProp name="variableNames">forum_ref_id,forum_pk, forum_name</stringProp>
                  <boolProp name="ignoreFirstLine">true</boolProp>
                  <stringProp name="delimiter">,</stringProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="shareMode">shareMode.group</stringProp>
                </CSVDataSet>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${forum_ref_id}&quot; != &quot;###STOP###&quot; &amp;&amp; &quot;${forum_pk}&quot; == &quot;&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <stringProp name="TestPlan.comments">If we don&apos;t have a thread id, we are in the forum overview</stringProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum Threads Overview for ${__urldecode(${forum_name})}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="target" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">frm_${forum_ref_id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">target</stringProp>
                        </elementProp>
                        <elementProp name="client_id" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">client_id</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForumThreadsHeaderImage" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetForumHeaderImage</stringProp>
                      <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                      <stringProp name="HtmlExtractor.attribute">src</stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForumThreadsHeaderContent" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetForumHeaderContent</stringProp>
                      <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
                      <stringProp name="HtmlExtractor.attribute"></stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForumThreadsHeaderImage" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetForumHeaderImage</stringProp>
                      <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForumThreadsHeaderContent" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="374569359">${__urldecode(${forum_name})}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetForumHeaderContent</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">&quot;${forum_ref_id}&quot; != &quot;###STOP###&quot; &amp;&amp; &quot;${forum_pk}&quot; != &quot;&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <stringProp name="TestPlan.comments">If we have a threa id, we are in a thread view</stringProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum ${__urldecode(${forum_name})}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="target" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">frm_${forum_ref_id}_${forum_pk}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">target</stringProp>
                        </elementProp>
                        <elementProp name="client_id" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">client_id</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForumHeaderImage" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetForumHeaderImage</stringProp>
                      <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                      <stringProp name="HtmlExtractor.attribute">src</stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForumHeaderContent" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetForumHeaderContent</stringProp>
                      <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
                      <stringProp name="HtmlExtractor.attribute"></stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForumURL" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetForumURL</stringProp>
                      <stringProp name="HtmlExtractor.expr">#tab_order_by_date &gt; a</stringProp>
                      <stringProp name="HtmlExtractor.attribute">href</stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetForumCmdNode" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">ilGetForumCmdNode</stringProp>
                      <stringProp name="RegexExtractor.regex">cmdNode=(.+?)&amp;</stringProp>
                      <stringProp name="RegexExtractor.template"></stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number"></stringProp>
                      <stringProp name="Sample.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetForumURL</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForumHeaderImage" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetForumHeaderImage</stringProp>
                      <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForumHeaderContent" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="374569359">${__urldecode(${forum_name})}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetForumHeaderContent</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForumURL" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="36139">#NV</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">12</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetForumURL</stringProp>
                      <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForumCmdNode" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="36139">#NV</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">12</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetForumCmdNode</stringProp>
                      <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum ${__urldecode(${forum_name})} Posts Order By Post" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="viewmode" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">1</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">viewmode</stringProp>
                        </elementProp>
                        <elementProp name="target" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">frm_${forum_ref_id}_${forum_pk}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">target</stringProp>
                        </elementProp>
                        <elementProp name="client_id" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">client_id</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForumPostsOrderByPostHeaderImage" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetForumPostsOrderByPostHeaderImage</stringProp>
                      <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                      <stringProp name="HtmlExtractor.attribute">src</stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForumPostsOrderByPostContent" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetForumPostsOrderByPostHeaderContent</stringProp>
                      <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
                      <stringProp name="HtmlExtractor.attribute"></stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForumPostsOrderByPostHeaderImage" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetForumPostsOrderByPostHeaderImage</stringProp>
                      <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForumPostsOrderByPostContent" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="374569359">${__urldecode(${forum_name})}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetForumPostsOrderByPostHeaderContent</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum ${__urldecode(${forum_name})} Posts Order By Date" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="viewmode" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">viewmode</stringProp>
                        </elementProp>
                        <elementProp name="target" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">frm_${forum_ref_id}_${forum_pk}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">target</stringProp>
                        </elementProp>
                        <elementProp name="client_id" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">client_id</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForumPostsOrderByDateHeaderImage" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetForumPostsOrderByDateHeaderImage</stringProp>
                      <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                      <stringProp name="HtmlExtractor.attribute">src</stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForumPostsOrderByDateContent" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetForumPostsOrderByDateHeaderContent</stringProp>
                      <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
                      <stringProp name="HtmlExtractor.attribute"></stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForumPostsOrderByDateHeaderImage" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetForumPostsOrderByDateHeaderImage</stringProp>
                      <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForumPostsOrderByDateContent" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="374569359">${__urldecode(${forum_name})}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetForumPostsOrderByDateHeaderContent</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum ${__urldecode(${forum_name})} Posts Toggle Notification First" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="cmdClass" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">ilobjforumgui</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cmdClass</stringProp>
                        </elementProp>
                        <elementProp name="cmd" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">toggleThreadNotification</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cmd</stringProp>
                        </elementProp>
                        <elementProp name="baseClass" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">ilRepositoryGUI</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">baseClass</stringProp>
                        </elementProp>
                        <elementProp name="ref_id" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${forum_ref_id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">ref_id</stringProp>
                        </elementProp>
                        <elementProp name="thr_pk" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${forum_pk}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">thr_pk</stringProp>
                        </elementProp>
                        <elementProp name="cmdNode" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ilGetForumCmdNode_g1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cmdNode</stringProp>
                        </elementProp>
                        <elementProp name="client_id" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">client_id</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForumToogleNotification" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetForumToogleNotification</stringProp>
                      <stringProp name="HtmlExtractor.expr">#headp_not_icon &gt; img</stringProp>
                      <stringProp name="HtmlExtractor.attribute">src</stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForumCmdNode" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="36139">#NV</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">12</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetForumCmdNode</stringProp>
                      <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname"></stringProp>
                      <stringProp name="RegexExtractor.regex">(./templates/default/images/notification_on.svg|./templates/default/images/notification_off.svg)</stringProp>
                      <stringProp name="RegexExtractor.template"></stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number"></stringProp>
                      <stringProp name="Sample.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetForumToogleNotification</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum ${__urldecode(${forum_name})} Posts Toggle Notification Second" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="cmdClass" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">ilobjforumgui</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cmdClass</stringProp>
                        </elementProp>
                        <elementProp name="cmd" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">toggleThreadNotification</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cmd</stringProp>
                        </elementProp>
                        <elementProp name="baseClass" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">ilRepositoryGUI</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">baseClass</stringProp>
                        </elementProp>
                        <elementProp name="ref_id" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${forum_ref_id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">ref_id</stringProp>
                        </elementProp>
                        <elementProp name="thr_pk" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${forum_pk}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">thr_pk</stringProp>
                        </elementProp>
                        <elementProp name="cmdNode" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ilGetForumCmdNode_g1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cmdNode</stringProp>
                        </elementProp>
                        <elementProp name="client_id" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">client_id</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForumToogleNotification" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetForumToogleNotification</stringProp>
                      <stringProp name="HtmlExtractor.expr">#headp_not_icon &gt; img</stringProp>
                      <stringProp name="HtmlExtractor.attribute">src</stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForumCmdNode" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="36139">#NV</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">12</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetForumCmdNode</stringProp>
                      <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname"></stringProp>
                      <stringProp name="RegexExtractor.regex">(./templates/default/images/notification_on.svg|./templates/default/images/notification_off.svg)</stringProp>
                      <stringProp name="RegexExtractor.template"></stringProp>
                      <stringProp name="RegexExtractor.default"></stringProp>
                      <stringProp name="RegexExtractor.match_number"></stringProp>
                      <stringProp name="Sample.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetForumToogleNotification</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF Admin AND NOT ReadOnly" enabled="true">
              <stringProp name="IfController.condition">${IS_ADMIN} &amp;&amp; !${READ_ONLY}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TEST Manage Repository" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <stringProp name="TestPlan.comments">some CRUD operations with categories</stringProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Repository" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/goto.php?target=root_1</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryHeaderImage" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetRepositoryHeaderImage</stringProp>
                    <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                    <stringProp name="HtmlExtractor.attribute">src</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryBreadcrumbUrl" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetRepositoryBreadcrumbUrl</stringProp>
                    <stringProp name="HtmlExtractor.expr">ol.breadcrumb a</stringProp>
                    <stringProp name="HtmlExtractor.attribute">href</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryBreadcrumbContent" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetRepositoryBreadcrumbContent</stringProp>
                    <stringProp name="HtmlExtractor.expr">ol.breadcrumb a</stringProp>
                    <stringProp name="HtmlExtractor.attribute"></stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryHeaderContent" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetRepositoryHeaderContent</stringProp>
                    <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
                    <stringProp name="HtmlExtractor.attribute"></stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryNewCat" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetRepositoryNewCat</stringProp>
                    <stringProp name="HtmlExtractor.expr">div.ilNewObjectSelector a#cat</stringProp>
                    <stringProp name="HtmlExtractor.attribute">href</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryHeaderImage" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-167724106">/images/icon_root.svg</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetRepositoryHeaderImage</stringProp>
                    <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryBreadcrumbUrl" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1449016747">ilias\.php\?ref\_id\=1\&amp;cmd\=frameset\&amp;cmdClass\=ilrepositorygui\&amp;cmdNode\=[^&amp;]*\&amp;baseClass\=ilRepositoryGUI1</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetRepositoryBreadcrumbUrl</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryBreadcrumbContent" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-2240617">${ilGetRepositoryHeaderContent}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetRepositoryBreadcrumbContent</stringProp>
                    <stringProp name="TestPlan.comments">sanity check, that we picked the right breadcrumb (must match the header)</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryHeaderContent" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-856324859">(?!#NV).+</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">1</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetRepositoryHeaderContent</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryNewCat" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1649786606">ilias\.php\?.+</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">1</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetRepositoryNewCat</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="DEBUG: Snapshot Variables" enabled="true">
                  <boolProp name="displayJMeterProperties">true</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugSampler>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="ITERATIONS" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="-1266493130">ITERATIONS</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="85959">
                      <stringProp name="51">3</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="${ITERATIONS}x New Category (nested)" enabled="true">
                  <boolProp name="LoopController.continue_forever">true</boolProp>
                  <stringProp name="LoopController.loops">${ITERATIONS}</stringProp>
                </LoopController>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="NewCategoryAction" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">NewCategoryAction = vars.get(&quot;ilPostNewCategoryNewCat&quot;);

if (NewCategoryAction == null || NewCategoryAction == &quot;#NV&quot;) {
	NewCategoryAction = vars.get(&quot;ilGetRepositoryNewCat&quot;);
}

vars.put(&quot;NewCategoryAction&quot;, NewCategoryAction);</stringProp>
                    <stringProp name="scriptLanguage">jexl</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="On Error Start Next Thread Loop" enabled="true">
                    <intProp name="OnError.action">4</intProp>
                  </ResultAction>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET NewCategory" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${PATH}/${NewCategoryAction}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryAction" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetNewCategoryAction</stringProp>
                      <stringProp name="HtmlExtractor.expr">div#accordion__1 .il_VAccordionInnerContainer:nth-child(1) form#form_</stringProp>
                      <stringProp name="HtmlExtractor.attribute">action</stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryTitle" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetNewCategoryTitle</stringProp>
                      <stringProp name="HtmlExtractor.expr">div#accordion__1 .il_VAccordionInnerContainer:nth-child(1) form#form_ input#title</stringProp>
                      <stringProp name="HtmlExtractor.attribute">name</stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryDescription" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetNewCategoryDescription</stringProp>
                      <stringProp name="HtmlExtractor.expr">div#accordion__1 .il_VAccordionInnerContainer:nth-child(1) form#form_ textarea#desc</stringProp>
                      <stringProp name="HtmlExtractor.attribute">name</stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategorySubmit" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetNewCategorySubmit</stringProp>
                      <stringProp name="HtmlExtractor.expr">div#accordion__1 .il_VAccordionInnerContainer:nth-child(1) form#form_ input[type=submit][name=&quot;cmd[save]&quot;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">name</stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategorySubmitV" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilGetNewCategorySubmitV</stringProp>
                      <stringProp name="HtmlExtractor.expr">div#accordion__1 .il_VAccordionInnerContainer:nth-child(1) form#form_ input[type=submit][name=&quot;cmd[save]&quot;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryAction" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="36139">#NV</stringProp>
                        <stringProp name="0"></stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">12</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetNewCategoryAction</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryTitle" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="36139">#NV</stringProp>
                        <stringProp name="0"></stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">12</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetNewCategoryTitle</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryDescription" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="36139">#NV</stringProp>
                        <stringProp name="0"></stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">12</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetNewCategoryDescription</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategorySubmit" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="36139">#NV</stringProp>
                        <stringProp name="0"></stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">12</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetNewCategorySubmit</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategorySubmitV" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="36139">#NV</stringProp>
                        <stringProp name="0"></stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">12</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetNewCategorySubmitV</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST NewCategory" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="${ilGetNewCategoryTitle}" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${__samplerName} @ ${__time(Y-M-D_H:M:S)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">${ilGetNewCategoryTitle}</stringProp>
                        </elementProp>
                        <elementProp name="${ilGetNewCategoryDescription}" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">created by jmeter testplan ${__TestPlanName}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">${ilGetNewCategoryDescription}</stringProp>
                        </elementProp>
                        <elementProp name="${ilGetNewCategorySubmit}" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${ilGetNewCategorySubmitV}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">${ilGetNewCategorySubmit}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${PATH}/${ilGetNewCategoryAction}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="FatalError" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">FatalError</stringProp>
                      <stringProp name="RegexExtractor.regex">\&lt;b\&gt;Fatal error\&lt;\/b\&gt;\:\s*(.*)\&lt;br \/\&gt;</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">#NV</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilPostNewCategoryHeaderImage" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilPostNewCategoryHeaderImage</stringProp>
                      <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                      <stringProp name="HtmlExtractor.attribute">src</stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilPostNewCategoryNewCat" enabled="true">
                      <stringProp name="HtmlExtractor.refname">ilPostNewCategoryNewCat</stringProp>
                      <stringProp name="HtmlExtractor.expr">div.ilNewObjectSelector a#cat</stringProp>
                      <stringProp name="HtmlExtractor.attribute">href</stringProp>
                      <stringProp name="HtmlExtractor.default">#NV</stringProp>
                      <stringProp name="HtmlExtractor.match_number"></stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetLastcreatedCategoryRefId" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
                      <stringProp name="RegexExtractor.refname">ilGetLastcreatedCategoryRefId</stringProp>
                      <stringProp name="RegexExtractor.regex">ref_id=(.+?)&amp;</stringProp>
                      <stringProp name="RegexExtractor.template"></stringProp>
                      <stringProp name="RegexExtractor.default">#NV</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="FatalError" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="36139">#NV</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">FatalError</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilPostNewCategoryHeaderImage" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1524009938">/images/icon_cat.svg</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilPostNewCategoryHeaderImage</stringProp>
                      <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilPostNewCategoryNewCat" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1649786606">ilias\.php\?.+</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilPostNewCategoryNewCat</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="not error.php" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="845794093">.*\/error\.php</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.sample_label</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">6</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLastcreatedCategoryRefId" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-776220837">(?!#NV)\d+</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">ilGetLastcreatedCategoryRefId_g1</stringProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="script">String last_value = vars.get(&quot;ilGetLastcreatedCategoryRefId_g1&quot;);
int ref_id = Integer.parseInt(last_value);
RefIds = new ArrayList();
list = vars.getObject(&quot;CategoryRefIds&quot;);
if(list != null)
{
	RefIds = vars.getObject(&quot;CategoryRefIds&quot;);
}
else
{
	vars.putObject(&quot;ilGetFirstCreatedCategoryRefId&quot;, Integer.toString(ref_id));
}
RefIds.add(ref_id);
vars.putObject(&quot;CategoryRefIds&quot;, RefIds);</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET New Forum Get Formaction" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="ref_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ilGetLastcreatedCategoryRefId_g1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">ref_id</stringProp>
                    </elementProp>
                    <elementProp name="baseClass" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">ilRepositoryGUI</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">baseClass</stringProp>
                    </elementProp>
                    <elementProp name="cmd" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">create</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">cmd</stringProp>
                    </elementProp>
                    <elementProp name="new_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">frm</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">new_type</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetNewForumFormAction" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ilGetNewForumFormAction</stringProp>
                  <stringProp name="RegexExtractor.regex">action=&quot;(.+?cmdClass=ilobjforumgui.+?new_type=frm.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template"></stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewForumFormAction" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">20</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST New Forum" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="baseClass" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">ilRepositoryGUI</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">baseClass</stringProp>
                    </elementProp>
                    <elementProp name="cmd" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">post</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">cmd</stringProp>
                    </elementProp>
                    <elementProp name="new_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">frm</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">new_type</stringProp>
                    </elementProp>
                    <elementProp name="cmd[save]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Add Forum</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">cmd[save]</stringProp>
                    </elementProp>
                    <elementProp name="title" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__samplerName} @ ${__time(Y-M-D_HH:MM:SS)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">title</stringProp>
                    </elementProp>
                    <elementProp name="desc" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">created by jmeter testplan ${__TestPlanName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">desc</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/${__unescapeHtml(${ilGetNewForumFormAction_g1})}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewForumHeaderImage" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewForumHeaderImage</stringProp>
                  <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                  <stringProp name="HtmlExtractor.attribute">src</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetNewForumRefId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
                  <stringProp name="RegexExtractor.refname">ilGetNewForumRefId</stringProp>
                  <stringProp name="RegexExtractor.regex">ref_id=(.+?)&amp;</stringProp>
                  <stringProp name="RegexExtractor.template"></stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewForumHeaderImage" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewForumHeaderImage</stringProp>
                  <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewForumRefId" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-776220837">(?!#NV)\d+</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewForumRefId_g1</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET New Thread with Post Action Url" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="target" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">frm_${ilGetNewForumRefId_g1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">target</stringProp>
                    </elementProp>
                    <elementProp name="client_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">client_id</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}goto.php</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetNewThreadActionUrl" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ilGetNewThreadActionUrl</stringProp>
                  <stringProp name="RegexExtractor.regex">href=&quot;(.+?cmdClass=ilobjforumgui.+?cmd=createThread.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template"></stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewThreadActionUrl" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">20</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewThreadActionUrl_g1</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET New Thread with Post From Url Get Formaction" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/${__unescapeHtml(${ilGetNewThreadActionUrl_g1})}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetNewThreadFormAction" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ilGetNewThreadFormAction</stringProp>
                  <stringProp name="RegexExtractor.regex">action=&quot;(.+?cmdClass=ilobjforumgui.+?cmd=post.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template"></stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewThreadFormAction" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">20</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewThreadFormAction_g1</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetThreadFilehashValidate" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetThreadFilehashValidate</stringProp>
                  <stringProp name="HtmlExtractor.expr">#ilfilehash</stringProp>
                  <stringProp name="HtmlExtractor.attribute">value</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetThreadFilehashValidate" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetThreadFilehashValidate</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST New Forum with Post" enabled="true">
                <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                  <collectionProp name="HTTPFileArgs.files">
                    <elementProp name="README.md" elementType="HTTPFileArg">
                      <stringProp name="File.path">README.md</stringProp>
                      <stringProp name="File.paramname">userfile[0]</stringProp>
                      <stringProp name="File.mimetype">text/markdown</stringProp>
                    </elementProp>
                    <elementProp name="README.md" elementType="HTTPFileArg">
                      <stringProp name="File.path">README.md</stringProp>
                      <stringProp name="File.paramname">userfile[1]</stringProp>
                      <stringProp name="File.mimetype">text/markdown</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="cmd[addThread]]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Create</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">cmd[addThread]]</stringProp>
                    </elementProp>
                    <elementProp name="subject" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__samplerName} @ ${__time(Y-M-D_HH:MM:SS)} with Post</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">subject</stringProp>
                    </elementProp>
                    <elementProp name="message" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">created by jmeter testplan ${__TestPlanName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">message</stringProp>
                    </elementProp>
                    <elementProp name="ilfilehash" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ilGetThreadFilehashValidate}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">ilfilehash</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/${__unescapeHtml(${ilGetNewThreadFormAction_g1})}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewForumHeaderImage" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewForumHeaderImage</stringProp>
                  <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                  <stringProp name="HtmlExtractor.attribute">src</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetNewThreadRefId" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
                  <stringProp name="RegexExtractor.refname">ilGetNewThreadRefId</stringProp>
                  <stringProp name="RegexExtractor.regex">ref_id=(.+?)&amp;</stringProp>
                  <stringProp name="RegexExtractor.template"></stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetThreadCreationSuccessMessage" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetThreadCreationSuccessMessage</stringProp>
                  <stringProp name="HtmlExtractor.expr">.alert.alert-success</stringProp>
                  <stringProp name="HtmlExtractor.attribute">class</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewForumHeaderImage" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewForumHeaderImage</stringProp>
                  <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewThreadRefId" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-776220837">(?!#NV)\d+</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewThreadRefId_g1</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetThreadCreationSuccessMessage" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1007402190">alert alert-success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetThreadCreationSuccessMessage</stringProp>
                  <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop for Course with Sessions creation" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">4</stringProp>
              </LoopController>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Reset Loop Variables if loop changes" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">String currentLoop     = &quot;${ilCourseCreationCounterForTestTitle}&quot;;
String currentThread   = &quot;${__BeanShell(ctx.getThreadNum();,)}&quot;;
String oldLoop         = vars.get(&quot;my_custom_course_iteration_counter&quot;);
String myThread        = vars.get(&quot;my_custom_course_thread_counter&quot;);

if(currentLoop != oldLoop &amp;&amp; currentThread == myThread)
{
   vars.remove(&quot;course_member_login&quot;);
}
vars.put(&quot;my_custom_course_iteration_counter&quot;, currentLoop);
vars.put(&quot;my_custom_course_thread_counter&quot;, currentThread);

int sessions = Integer.parseInt(vars.get(&quot;ilCourseCreationCounter&quot;));
sessions = 10 * sessions;
vars.put(&quot;ilCourseCreationSessions&quot;, Integer.toString(sessions));</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="ilCourseCreationCounter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">10</stringProp>
                  <stringProp name="CounterConfig.incr">3</stringProp>
                  <stringProp name="CounterConfig.name">ilCourseCreationCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="ilCourseCreationCounterForTestTitle" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">4</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">ilCourseCreationCounterForTestTitle</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET New Course ${ilCourseCreationCounterForTestTitle} Get Formaction" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="ref_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${ilGetLastcreatedCategoryRefId_g1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">ref_id</stringProp>
                      </elementProp>
                      <elementProp name="baseClass" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">ilRepositoryGUI</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">baseClass</stringProp>
                      </elementProp>
                      <elementProp name="cmd" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">create</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">cmd</stringProp>
                      </elementProp>
                      <elementProp name="new_type" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">crs</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">new_type</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetNewCourseFormAction" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ilGetNewCourseFormAction</stringProp>
                    <stringProp name="RegexExtractor.regex">action=&quot;(.+?cmdClass=ilobjcoursegui.+?new_type=crs.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template"></stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCourseFormAction" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">20</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST New Course with ${ilCourseCreationSessions} Sessions" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="baseClass" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">ilRepositoryGUI</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">baseClass</stringProp>
                      </elementProp>
                      <elementProp name="cmd" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">post</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">cmd</stringProp>
                      </elementProp>
                      <elementProp name="new_type" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">crs</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">new_type</stringProp>
                      </elementProp>
                      <elementProp name="cmd[save]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Add Course</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">cmd[save]</stringProp>
                      </elementProp>
                      <elementProp name="title" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__samplerName} @ ${__time(Y-M-D_HH:MM:SS)} with ${ilCourseCreationSessions} Sessions</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">title</stringProp>
                      </elementProp>
                      <elementProp name="desc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">created by jmeter testplan ${__TestPlanName}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">desc</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/${__unescapeHtml(${ilGetNewCourseFormAction_g1})}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCourseHeaderImage" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetNewCourseHeaderImage</stringProp>
                    <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                    <stringProp name="HtmlExtractor.attribute">src</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetNewCourseRefId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
                    <stringProp name="RegexExtractor.refname">ilGetNewCourseRefId</stringProp>
                    <stringProp name="RegexExtractor.regex">ref_id=(.+?)&amp;</stringProp>
                    <stringProp name="RegexExtractor.template"></stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetCourseMembershipUrl" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ilGetCourseMembershipUrl</stringProp>
                    <stringProp name="RegexExtractor.regex">href=&quot;(.+?ref_id=${ilGetNewCourseRefId}.+?cmdClass=ilcoursemembershipgui.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template"></stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCourseHeaderImage" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-462514170">./templates/default/images/icon_crs.svg</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetNewCourseHeaderImage</stringProp>
                    <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCourseRefId" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-776220837">(?!#NV)\d+</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">1</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetNewCourseRefId_g1</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourseMembershipUrl" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET New Course Sessions ${ilCourseCreationCounterForTestTitle} Get Formaction" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="ref_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${ilGetNewCourseRefId_g1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">ref_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="new_type" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">sess</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">new_type</stringProp>
                      </elementProp>
                      <elementProp name="baseClass" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">ilRepositoryGUI</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">baseClass</stringProp>
                      </elementProp>
                      <elementProp name="cmd" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">create</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">cmd</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetCourseSessionFormAction" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ilGetCourseSessionFormAction</stringProp>
                    <stringProp name="RegexExtractor.regex">action=&quot;(.+?new_type=sess.+?cmdClass=ilobjsessiongui.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template"></stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCourseHeaderImage" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetCourseHeaderImage</stringProp>
                    <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                    <stringProp name="HtmlExtractor.attribute">src</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourseSessionFormActionValidate" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetCourseSessionFormAction_g1</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourseHeaderImageValidate" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-462514170">./templates/default/images/icon_crs.svg</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetCourseHeaderImage</stringProp>
                    <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Course ${ilCourseCreationSessions} Sessions" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="README.md" elementType="HTTPFileArg">
                        <stringProp name="File.path">README.md</stringProp>
                        <stringProp name="File.paramname">files[0]</stringProp>
                        <stringProp name="File.mimetype">text/markdown</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="cmd[save]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Add Session</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">cmd[save]</stringProp>
                      </elementProp>
                      <elementProp name="didactic_type" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">dtpl_0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">didactic_type</stringProp>
                      </elementProp>
                      <elementProp name="frequence" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">DAILY</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">frequence</stringProp>
                      </elementProp>
                      <elementProp name="lp_preset" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">lp_preset</stringProp>
                      </elementProp>
                      <elementProp name="count" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${ilCourseCreationSessions}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">count</stringProp>
                      </elementProp>
                      <elementProp name="until_type" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">until_type</stringProp>
                      </elementProp>
                      <elementProp name="registration_type" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">registration_type</stringProp>
                      </elementProp>
                      <elementProp name="event[tgl]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">event[tgl]</stringProp>
                      </elementProp>
                      <elementProp name="event[start]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">17.10.2017</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">event[start]</stringProp>
                      </elementProp>
                      <elementProp name="event[end]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">17.10.2017</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">event[end]</stringProp>
                      </elementProp>
                      <elementProp name="ilfilehash" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${ilGetCourseSessionGetIFilehash}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">ilfilehash</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/${__unescapeHtml(${ilGetCourseSessionFormAction_g1})}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCourseSessionSuccess" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetCourseSessionSuccess</stringProp>
                    <stringProp name="HtmlExtractor.expr">.alert.alert-info</stringProp>
                    <stringProp name="HtmlExtractor.attribute">class</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourseSessionSuccessValidate" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1014109123">alert alert-info</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetCourseSessionSuccess</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Course Add Members Get Formaction" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/${__unescapeHtml(${ilGetCourseMembershipUrl_g1})}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCourseAddMemberGetId" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetNewCourseAddMemberGetId</stringProp>
                    <stringProp name="HtmlExtractor.expr">#user_type &gt; option[selected=&quot;selected&quot;]</stringProp>
                    <stringProp name="HtmlExtractor.attribute">value</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCourseAddMemberFormAction" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetNewCourseAddMemberFormAction</stringProp>
                    <stringProp name="HtmlExtractor.expr">#ilToolbar</stringProp>
                    <stringProp name="HtmlExtractor.attribute">action</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetCourseMembersGalleryUrl" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ilGetCourseMembersGalleryUrl</stringProp>
                    <stringProp name="RegexExtractor.regex">href=&quot;(.+?ref_id=${ilGetNewCourseRefId_g1}.+?cmdClass=ilusersgallerygui.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template"></stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCourseAddMemberGetId" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetNewCourseAddMemberGetId</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCourseAddMemberFormAction" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetNewCourseAddMemberFormAction</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourseMembersGalleryUrl" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetCourseMembersGalleryUrl</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Course  ${ilCourseCreationCounterForTestTitle} Members Gallery Before Users" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/${__unescapeHtml(${ilGetCourseMembersGalleryUrl_g1})}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCourseHeaderImageBefore" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetCourseHeaderImageBefore</stringProp>
                    <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                    <stringProp name="HtmlExtractor.attribute">src</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetCourseMembersGalleryUrlContainsGalleryBefore" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
                    <stringProp name="RegexExtractor.refname">ilGetCourseMembersGalleryUrlContainsGalleryBefore</stringProp>
                    <stringProp name="RegexExtractor.regex">(.+?cmdClass=ilusersgallerygui.+?)</stringProp>
                    <stringProp name="RegexExtractor.template"></stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourseHeaderImageBefore" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-462514170">./templates/default/images/icon_crs.svg</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetCourseHeaderImageBefore</stringProp>
                    <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourseMembersGalleryUrlContainsGalleryBefore" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetCourseMembersGalleryUrlContainsGalleryBefore</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(&quot;${course_member_login}&quot; != &quot;###STOP###&quot;)}</stringProp>
                </WhileController>
                <hashTree>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                    <stringProp name="filename">config/course_members.csv</stringProp>
                    <stringProp name="fileEncoding">UTF-8</stringProp>
                    <stringProp name="variableNames">course_member_login</stringProp>
                    <boolProp name="ignoreFirstLine">true</boolProp>
                    <stringProp name="delimiter">,</stringProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="shareMode">shareMode.group</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">&quot;${course_member_login}&quot; != &quot;###STOP###&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <stringProp name="TestPlan.comments">If we don&apos;t have a thread id, we are in the forum overview</stringProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Course ${ilCourseCreationCounterForTestTitle} Add Members" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="cmd[addUserFromAutoComplete]" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">Add</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cmd[addUserFromAutoComplete]</stringProp>
                          </elementProp>
                          <elementProp name="user_login" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${course_member_login}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">user_login</stringProp>
                          </elementProp>
                          <elementProp name="user_type" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${ilGetNewCourseAddMemberGetId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">user_type</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${PATH}/${__unescapeHtml(${ilGetNewCourseAddMemberFormAction})}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCourseSessionSuccess" enabled="true">
                        <stringProp name="HtmlExtractor.refname">ilGetCourseSessionSuccess</stringProp>
                        <stringProp name="HtmlExtractor.expr">.alert.alert-success</stringProp>
                        <stringProp name="HtmlExtractor.attribute">class</stringProp>
                        <stringProp name="HtmlExtractor.default">#NV</stringProp>
                        <stringProp name="HtmlExtractor.match_number"></stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourseSessionSuccessValidate" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1007402190">alert alert-success</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">ilGetCourseSessionSuccess</stringProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Course  ${ilCourseCreationCounterForTestTitle} Members Gallery After" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/${__unescapeHtml(${ilGetCourseMembersGalleryUrl_g1})}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCourseHeaderImageAfter" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetCourseHeaderImageAfter</stringProp>
                    <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                    <stringProp name="HtmlExtractor.attribute">src</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCourseHeaderContentAfter" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetCourseHeaderContentAfter</stringProp>
                    <stringProp name="HtmlExtractor.expr">div.il-card.thumbnail</stringProp>
                    <stringProp name="HtmlExtractor.attribute">class</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetCourseMembersGalleryUrlContainsGalleryAfter" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
                    <stringProp name="RegexExtractor.refname">ilGetCourseMembersGalleryUrlContainsGalleryAfter</stringProp>
                    <stringProp name="RegexExtractor.regex">(.+?cmdClass=ilusersgallerygui.+?)</stringProp>
                    <stringProp name="RegexExtractor.template"></stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourseHeaderImageAfter" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-462514170">./templates/default/images/icon_crs.svg</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetCourseHeaderImageAfter</stringProp>
                    <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourseHeaderContentAfter" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="840937926">il-card thumbnail</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetCourseHeaderContentAfter</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourseMembersGalleryUrlContainsGalleryAfter" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetCourseMembersGalleryUrlContainsGalleryAfter</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="DEBUG: Snapshot Variables" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete First Created Category" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET DeleteCategoryAction" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="target" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">root_1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">target</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryHeaderImage" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetRepositoryHeaderImage</stringProp>
                    <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                    <stringProp name="HtmlExtractor.attribute">src</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryHeaderImage" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="499842092">./templates/default/images/icon_root.svg</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetRepositoryHeaderImage</stringProp>
                    <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GetRemoveCategoryAction" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ilGetRemoveCategoryActionUrl</stringProp>
                    <stringProp name="RegexExtractor.regex">href=&quot;(.+?item_ref_id=${ilGetFirstCreatedCategoryRefId}.+?cmd=delete.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template"></stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="GetRemoveCategoryAction" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetRemoveCategoryActionUrl</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Get Remove Category Get Formaction" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/${__unescapeHtml(${ilGetRemoveCategoryActionUrl_g1})}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCategoryHeaderImage" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetCategoryHeaderImage</stringProp>
                    <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                    <stringProp name="HtmlExtractor.attribute">src</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCategoryHeaderImage" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="499842092">./templates/default/images/icon_root.svg</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetCategoryHeaderImage</stringProp>
                    <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="GetRemoveCategoryFormActionUrl" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetRemoveCategoryFormActionUrl</stringProp>
                    <stringProp name="HtmlExtractor.expr">#il_center_col &gt; form</stringProp>
                    <stringProp name="HtmlExtractor.attribute">action</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="GetRemoveCategoryFormActionUrl" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetRemoveCategoryFormActionUrl</stringProp>
                    <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST GetRemoveCategory" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="cmd[confirmedDelete]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Confirm</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">cmd[confirmedDelete]</stringProp>
                      </elementProp>
                      <elementProp name="id[]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${ilGetFirstCreatedCategoryRefId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">id[]</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/${__unescapeHtml(${ilGetRemoveCategoryFormActionUrl})}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GetCategoryRemoveSuccess" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ilGetCategoryRemoveSuccess</stringProp>
                    <stringProp name="RegexExtractor.regex">href=&quot;(.+?item_ref_id=${ilGetFirstCreatedCategoryRefId}.+?cmd=delete.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template"></stringProp>
                    <stringProp name="RegexExtractor.default">#NV</stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCategoryRemoveSuccess" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">40</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetCategoryRemoveSuccess</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CleanUp Variables PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">vars.remove(&quot;ilGetCategoryHeaderImage&quot;);
vars.remove(&quot;ilGetFirstCreatedCategoryRefId&quot;);
vars.remove(&quot;ilGetLastcreatedCategoryRefId&quot;);
vars.remove(&quot;ilGetLastcreatedCategoryRefId_g&quot;);
vars.remove(&quot;ilGetLastcreatedCategoryRefId_g0&quot;);
vars.remove(&quot;ilGetLastcreatedCategoryRefId_g1&quot;);
vars.remove(&quot;ilGetRemoveCategoryActionUrl&quot;);
vars.remove(&quot;ilGetRemoveCategoryActionUrl_g&quot;);
vars.remove(&quot;ilGetRemoveCategoryActionUrl_g0&quot;);
vars.remove(&quot;ilGetRemoveCategoryActionUrl_g1&quot;);
vars.remove(&quot;ilGetRemoveCategoryFormActionUrl&quot;);
vars.remove(&quot;ilGetNewCategoryAction&quot;);
vars.remove(&quot;ilGetRepositoryNewCat&quot;);
vars.remove(&quot;ilPostNewCategoryNewCat&quot;);
vars.remove(&quot;ilCourseCreationSessions&quot;);
vars.remove(&quot;ilCourseCreationCounter&quot;);
vars.remove(&quot;ilCourseCreationCounterForTestTitle&quot;);
vars.put(&quot;ilCourseCreationCounter&quot;,&quot;1&quot;);
vars.put(&quot;ilCourseCreationCounterForTestTitle&quot;,&quot;1&quot;);
vars.put(&quot;ilCourseCreationSessions&quot;, &quot;1&quot;);
vars.putObject(&quot;ilGetFirstCreatedCategoryRefId&quot;, null);
vars.putObject(&quot;CategoryRefIds&quot;, null);</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="${ITERATIONS}x Delete Category (nested)" enabled="false">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${ITERATIONS}</stringProp>
              </LoopController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="NewCategoryAction" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">NewCategoryAction = vars.get(&quot;ilPostNewCategoryNewCat&quot;);

if (NewCategoryAction == null || NewCategoryAction == &quot;#NV&quot;) {
	NewCategoryAction = vars.get(&quot;ilGetRepositoryNewCat&quot;);
}

vars.put(&quot;NewCategoryAction&quot;, NewCategoryAction);</stringProp>
                  <stringProp name="scriptLanguage">jexl</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET DelCategory" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/${DelCategoryAction}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryAction" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetNewCategoryAction</stringProp>
                    <stringProp name="HtmlExtractor.expr">div#accordion__1:nth-child(1) form#form_</stringProp>
                    <stringProp name="HtmlExtractor.attribute">action</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryTitle" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetNewCategoryTitle</stringProp>
                    <stringProp name="HtmlExtractor.expr">div#accordion__1:nth-child(1) form#form_ input#title</stringProp>
                    <stringProp name="HtmlExtractor.attribute">name</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryDescription" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetNewCategoryDescription</stringProp>
                    <stringProp name="HtmlExtractor.expr">div#accordion__1:nth-child(1) form#form_ textarea#desc</stringProp>
                    <stringProp name="HtmlExtractor.attribute">name</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategorySubmit" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetNewCategorySubmit</stringProp>
                    <stringProp name="HtmlExtractor.expr">div#accordion__1:nth-child(1) form#form_ input[type=submit][name=&quot;cmd[save]&quot;]</stringProp>
                    <stringProp name="HtmlExtractor.attribute">name</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategorySubmitV" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilGetNewCategorySubmitV</stringProp>
                    <stringProp name="HtmlExtractor.expr">div#accordion__1:nth-child(1) form#form_ input[type=submit][name=&quot;cmd[save]&quot;]</stringProp>
                    <stringProp name="HtmlExtractor.attribute">value</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryAction" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetNewCategoryAction</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryTitle" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetNewCategoryTitle</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryDescription" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetNewCategoryDescription</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategorySubmit" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetNewCategorySubmit</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategorySubmitV" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilGetNewCategorySubmitV</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST DelCategory" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="${ilGetNewCategoryTitle}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${__samplerName} @ ${__time(Y-M-D_H:M:S)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">${ilGetNewCategoryTitle}</stringProp>
                      </elementProp>
                      <elementProp name="${ilGetNewCategoryDescription}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">created by jmeter testplan ${__TestPlanName}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">${ilGetNewCategoryDescription}</stringProp>
                      </elementProp>
                      <elementProp name="${ilGetNewCategorySubmit}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${ilGetNewCategorySubmitV}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">${ilGetNewCategorySubmit}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${PATH}/${ilGetNewCategoryAction}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="FatalError" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">FatalError</stringProp>
                    <stringProp name="RegexExtractor.regex">\&lt;b\&gt;Fatal error\&lt;\/b\&gt;\:\s*(.*)\&lt;br \/\&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">#NV</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilPostNewCategoryHeaderImage" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilPostNewCategoryHeaderImage</stringProp>
                    <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                    <stringProp name="HtmlExtractor.attribute">src</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilPostNewCategoryNewCat" enabled="true">
                    <stringProp name="HtmlExtractor.refname">ilPostNewCategoryNewCat</stringProp>
                    <stringProp name="HtmlExtractor.expr">div.ilNewObjectSelector a#cat</stringProp>
                    <stringProp name="HtmlExtractor.attribute">href</stringProp>
                    <stringProp name="HtmlExtractor.default">#NV</stringProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="FatalError" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="36139">#NV</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">FatalError</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilPostNewCategoryHeaderImage" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1524009938">/images/icon_cat.svg</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilPostNewCategoryHeaderImage</stringProp>
                    <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilPostNewCategoryNewCat" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1649786606">ilias\.php\?.+</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">1</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">ilPostNewCategoryNewCat</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="not error.php" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="845794093">.*\/error\.php</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.sample_label</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="On Error Start Next Thread Loop" enabled="true">
                  <intProp name="OnError.action">4</intProp>
                </ResultAction>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Sleep" enabled="true">
                  <stringProp name="ConstantTimer.delay">10</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Logout Module" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Logout" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/logout.php?lang=en</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">We set the language to &apos;en&apos; to be able to interpret the result</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="DEBUG: Snapshot Sampler (post run)" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetLogoutHeader" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetLogoutHeader</stringProp>
                <stringProp name="HtmlExtractor.expr">.il_Header h1</stringProp>
                <stringProp name="HtmlExtractor.attribute"></stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLogoutHeader" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2013462102">Logout</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetLogoutHeader</stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="DEBUG: Inspect Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>false</label>
              <code>true</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="TestPlan.comments">temporarily place this beneath any element you want to inspect</stringProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="DEV: Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename">${OUT_DIR}/results_.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <sampleCount>true</sampleCount>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${OUT_DIR}/summary_report.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <sampleCount>true</sampleCount>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${OUT_DIR}/response_time_graph.xml</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <sampleCount>true</sampleCount>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${OUT_DIR}/graph_results.xml</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ConfigTestElement guiclass="PropertyControlGui" testclass="ConfigTestElement" testname="DEBUG: Display Properties" enabled="false"/>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="WorkBench Test Fragment" enabled="false"/>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="DEBUG: Inspect Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>false</label>
              <code>true</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="TestPlan.comments">temporarily place this beneath any element you want to inspect</stringProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="DEBUG: Snapshot Variables" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="DEBUG: Inspect Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>false</label>
              <code>true</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="TestPlan.comments">temporarily place this beneath any element you want to inspect</stringProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
